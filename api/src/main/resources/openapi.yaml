openapi: 3.0.1
info:
  title: Cinnabar API
  description: >-
    This is a Movies/Tv-series Reviews Server based on the OpenAPI 3.0
    specification. 
     If you want to know more about the project here are some useful links:
    - [The Tooren Romaros
    repository](https://github.com/CoPhos/ToorenRomaros/tree/master)

    - [The source API definition for the Tooren Romaros
    project](https://github.com/CoPhos/ToorenRomaros/blob/develop/tooren_romaros_api/src/main/resources/api/openapi.yaml)
  contact:
    name: Jorge Cobos
    url: https://www.JorgeCobos.com
    email: cobos1932@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  version: "1.0"
servers:
  - url: http://localhost:9090
    description: Development
  - url: http://localhost:9090
    description: Production
tags:
  - name: Staff
    description: Contains Staff Entity Related Operations.
  - name: Genre
    description: Contains Genre Entity Related Operations.
  - name: Tag
    description: Contains Tag Entity Related Operations.
  - name: User
    description: Contains Authentication and Password Reset Operations.
  - name: Post
    description: Contains Post Entity Related Operations.
  - name: Watch List
    description: Contains Watch List Entity Related Operations.
  - name: Film
    description: Contains Film Entity Related Operations.
  - name: Comment
    description: Contains Comment Entity Related Operations.
  - name: User
    description: Contains User Entity Related Operations.
  - name: Saga
    description: Contains Saga Entity Related Operations.
  - name: Image
    description: Contains Image Entity Related Operations.
  - name: Stream site
    description: Contains Stream site Entity Related Operations.
paths:
  /api/v1/tags/{tagId}:
    put:
      tags:
        - patch
        - Staff
        - Tag
      summary: Update Tag
      description: >-
        This endpoint allows users to update a specific Tag entity identified by
        its unique identifier (staffId). Users can modify the properties of the
        Tag using the provided update payload.
      operationId: updateTag
      parameters:
        - name: tagId
          in: path
          description: ID of the Tag
          required: true
        - name: CreateTagDto
          in: query
          description: CreateTagDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTagDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTagDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTagDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - Bearer Authentication:
            - ADMIN
    delete:
      tags:
        - Tag
        - delete
      summary: Delete Tag
      description: >-
        This endpoint allows users to delete a specific Tag identified by its
        unique identifier (id). Deleting a Tag is a permanent action and cannot
        be undone.
      operationId: deleteTag
      parameters:
        - name: tagId
          in: path
          description: The ID of the Tag
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      responses:
        "202":
          description: Accepted
          content:
            text/plain: {}
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
  /api/v1/watchLists:
    post:
      tags:
        - post
        - Watch List
      summary: Create Watch List
      description: >-
        This endpoint allows users to add a new Watch List item by providing the
        necessary details using the provided payload.
      operationId: createWatchList
      parameters:
        - name: GetWatchListDto
          in: query
          description: GetWatchListDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWatchListDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateWatchListDto"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateWatchListDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication: []
  /api/v1/users:
    post:
      tags:
        - User
        - post
      summary: User Registration
      description: >-
        This endpoint allows users to sign up by providing necessary
        registration details. Upon successful registration, the user is saved in
        the database, and access and refresh tokens are generated and returned
        for immediate authentication.
      operationId: signUp
      parameters:
        - name: createUserDto
          in: query
          description: createUserDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSignedInDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Conflict
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/users/images:
    post:
      tags:
        - Image
        - User
        - post
      summary: Create Image for User
      description: >-
        This endpoint allows users to add a new image to the file system for a
        specific User. Users can upload an image file, specify the image type,
        and provide the film ID.
      operationId: createImage
      parameters:
        - name: imageType
          in: query
          required: true
          schema:
            type: string
        - name: id
          in: query
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: CreateImageDto
          in: query
          description: CreateImageDto object
          required: true
          content:
            form-data:
              schema:
                $ref: "#/components/schemas/CreateImageDto"
      requestBody:
        content:
          application/json:
            schema:
              required:
                - image
              type: object
              properties:
                image:
                  type: string
                  format: binary
        required: true
      responses:
        "201":
          description: Created
          content:
            text/plain: {}
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - CRITIC
            - USER
  /api/v1/tags:
    post:
      tags:
        - post
        - Tag
      summary: Create Tag
      description: >-
        This endpoint allows users to create a new Tag by providing the
        necessary details using the provided payload.
      operationId: createTag
      parameters:
        - name: GetTagDto
          in: query
          description: GetTagDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTagDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTagDto"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTagDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
  /api/v1/streamsites/images:
    post:
      tags:
        - Image
        - Stream Site
        - post
      summary: Create Image for Stream Site
      description: >-
        This endpoint allows users to add a new image to the file system for a
        specific Stream Site. Users can upload an image file, specify the image
        type, and provide the film ID.
      operationId: createImage_1
      parameters:
        - name: imageType
          in: query
          required: true
          schema:
            type: string
        - name: id
          in: query
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: CreateImageDto
          in: query
          description: CreateImageDto object
          required: true
          content:
            form-data:
              schema:
                $ref: "#/components/schemas/CreateImageDto"
      requestBody:
        content:
          application/json:
            schema:
              required:
                - image
              type: object
              properties:
                image:
                  type: string
                  format: binary
        required: true
      responses:
        "201":
          description: Created
          content:
            text/plain: {}
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
  /api/v1/streaming:
    post:
      tags:
        - post
        - Stream site
      summary: Create Streaming Site
      description: >-
        This endpoint allows users to create a new Stream site by providing the
        necessary details using the provided payload.
      operationId: createStreamSite
      parameters:
        - name: GetStreamSiteDto
          in: query
          description: GetStreamSiteDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStreamSiteDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStreamSiteDto"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateStreamSiteDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
  /api/v1/streaming/film:
    post:
      tags:
        - post
        - Stream site
        - Film
      summary: Create Film-Streaming Site Relationship
      description: >-
        This endpoint allows users to create a new relationship between a film
        and a streaming site by providing the necessary details using the
        provided payload.
      operationId: createStreamSiteFilm
      parameters:
        - name: CreateStreamSiteFilmDto
          in: query
          description: CreateStreamSiteFilmDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateStreamSiteFilmDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStreamSiteFilmDto"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStreamSiteFilmDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
  /api/v1/staffs:
    post:
      tags:
        - post
        - Staff
        - Saga
      summary: Create Stafff
      description: >-
        This endpoint allows users to create a new staff by providing the
        necessary details using the provided payload.
      operationId: createStaff
      parameters:
        - name: GetStaffDto
          in: query
          description: GetStaffDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStaffDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStaffDto"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateStaffDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
  /api/v1/staffs/images:
    post:
      tags:
        - Image
        - Staff
        - post
      summary: Create Image for Staff
      description: >-
        This endpoint allows users to add a new image to the file system for a
        specific staff. Users can upload an image file, specify the image type,
        and provide the film ID.
      operationId: createImage_2
      parameters:
        - name: imageType
          in: query
          required: true
          schema:
            type: string
        - name: id
          in: query
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: CreateImageDto
          in: query
          description: CreateImageDto object
          required: true
          content:
            form-data:
              schema:
                $ref: "#/components/schemas/CreateImageDto"
      requestBody:
        content:
          application/json:
            schema:
              required:
                - image
              type: object
              properties:
                image:
                  type: string
                  format: binary
        required: true
      responses:
        "201":
          description: Created
          content:
            text/plain: {}
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
  /api/v1/sagas:
    post:
      tags:
        - post
        - Saga
      summary: Create Saga
      description: >-
        This endpoint allows users to create a new saga by providing the
        necessary details using the provided payload.
      operationId: createSaga
      parameters:
        - name: SagaDto
          in: query
          description: SagaDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SagaDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SagaDto"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SagaDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
  /api/v1/posts:
    get:
      tags:
        - Post
        - get
      summary: Get Posts by Custom Query
      description: >-
        This endpoint retrieves posts based on custom query parameters, allowing
        users to filter and sort posts based on specific criteria.
      operationId: getPostByCustomQuery
      parameters:
        - name: tags
          in: query
          description: List of tag IDs to filter posts by.
          required: false
          schema:
            type: array
            items:
              type: string
              format: uuid
        - name: isReview
          in: query
          description: Filter posts that are reviews. Default is "false".
          required: false
          schema:
            type: boolean
        - name: latest
          in: query
          description: Sort posts by the latest. Default is "false".
          required: false
          schema:
            type: boolean
        - name: popular
          in: query
          description: Sort posts by popularity. Default is "false"
          required: false
          schema:
            type: boolean
        - name: search
          in: query
          description: Perform a search query to filter posts by title.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: The number page of the request.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The page size of each request. Default is "6"
          required: false
          schema:
            type: integer
            format: int32
            default: 6
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPostDetailsDto"
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
    post:
      tags:
        - post
        - Post
      summary: Create Post
      description: >-
        This endpoint allows users to create a new post by providing the
        necessary details using the provided payload.
      operationId: createPost
      parameters:
        - name: CreatePostDto
          in: query
          description: CreatePostDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePostDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePostDto"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPostDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
            - CRITIC
  /api/v1/posts/images:
    post:
      tags:
        - Image
        - Post
        - post
      summary: Create Image for Post
      description: >-
        This endpoint allows users to add a new image to the file system for a
        specific Post. Users can upload an image file, specify the image type,
        and provide the film ID.
      operationId: createImage_3
      parameters:
        - name: imageType
          in: query
          required: true
          schema:
            type: string
        - name: id
          in: query
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: CreateImageDto
          in: query
          description: CreateImageDto object
          required: true
          content:
            form-data:
              schema:
                $ref: "#/components/schemas/CreateImageDto"
      requestBody:
        content:
          application/json:
            schema:
              required:
                - image
              type: object
              properties:
                image:
                  type: string
                  format: binary
        required: true
      responses:
        "201":
          description: Created
          content:
            text/plain: {}
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - CRITIC
  /api/v1/genre:
    post:
      tags:
        - post
        - Genre
      summary: Create Genre
      description: >-
        This endpoint allows users to add a new genre by providing the necessary
        details using the provided payload.
      operationId: createGenre
      parameters:
        - name: genreDto
          in: query
          description: genreDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenreDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenreDto"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenreDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
  /api/v1/films:
    get:
      tags:
        - Film
        - get
      summary: Get Film by ID
      description: >-
        This endpoint retrieves a specific film identified by its unique
        identifier (ID).
      operationId: getFilmByDynamicQuery
      parameters:
        - name: streamId
          in: query
          description: List of stream IDs to filter films by.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: genres
          in: query
          description: List of genres to filter films by.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: suitableFor
          in: query
          description: List of suitability factors to filter films by.
          required: false
          schema:
            type: array
            items:
              type: string
          example: "[PG,PG-18]"
        - name: filmType
          in: query
          description: >-
            Filter films by type (e.g., "all", "1", "2"). Default is "all". (1
            is for movies, 2 is for series).
          required: false
          schema:
            type: string
            default: all
        - name: atTheaters
          in: query
          description: Filter films currently at theaters or not. Default is "false".
          required: false
          schema:
            type: string
        - name: commingSoonStreaming
          in: query
          description: >-
            Filter films coming soon on streaming platforms or not. Default is
            "false".
          required: false
          schema:
            type: string
        - name: commingSoonTheaters
          in: query
          required: false
          schema:
            type: string
        - name: atStreaming
          in: query
          description: Filter films currently streaming or not. Default is "false".
          required: false
          schema:
            type: string
        - name: orderBy
          in: query
          description: Array of fields for sorting films. Default is ["tittle-asc"]
          required: false
          schema:
            type: array
            items:
              type: string
            default:
              - tittle-asc
          example: "[title-asc, releaseDate-desc]"
        - name: userRating
          in: query
          description: >-
            Filter films by user rating. "down" for ratings less than 60
            otherwise "up"
          required: false
          schema:
            type: string
        - name: superRating
          in: query
          description: >-
            Filter films by super rating. "down" for ratings less than 60
            otherwise "up"
          required: false
          schema:
            type: string
        - name: search
          in: query
          description: " Perform a search query to filter films by title."
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: The number page of the request.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The page size of each request. Default is "6"
          required: false
          schema:
            type: integer
            format: int32
            default: 6
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDynamicQyeryFilmDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
    post:
      tags:
        - post
        - Film
      summary: Create Film
      description: >-
        This endpoint allows users to create a new film by providing the
        necessary details using the provided payload.
      operationId: createFilm
      parameters:
        - name: createFilmDto
          in: query
          description: createFilmDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateFilmDto"
      requestBody:
        content:
          application/json:
            schema:
              description: createFilmDto object
              oneOf:
                - $ref: "#/components/schemas/CreateFilmDto"
                - $ref: "#/components/schemas/CreateMovieDto"
                - $ref: "#/components/schemas/CreateSerieDto"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFilmDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
  /api/v1/films/staffs:
    post:
      tags:
        - post
        - Film
        - Staff
      summary: Create Film-Staff Relationship
      description: >-
        This endpoint allows users to create a new relationship between a film
        and a staff member by providing the necessary details using the provided
        payload.
      operationId: createStaffFilm
      parameters:
        - name: CreateStaffFilmDto
          in: query
          description: CreateStaffFilmDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateStaffFilmDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStaffFilmDto"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStaffFilmDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
  /api/v1/films/genres:
    post:
      tags:
        - post
        - Film
        - Genre
      summary: Create Film-Genre Relationship
      description: >-
        This endpoint allows users to create a new relationship between a film
        and its corresponding genre. Users can specify the film ID and genre ID
        in the payload to establish the relationship.
      operationId: createFilmGenre
      parameters:
        - name: getGenreFilmDto
          in: query
          description: getGenreFilmDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGenreFilmDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGenreFilmDto"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateGenreFilmDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
  /api/v1/film/images:
    post:
      tags:
        - Image
        - Film
        - post
      summary: Create Image for Film
      description: >-
        This endpoint allows users to add a new image to the file system for a
        specific film. Users can upload an image file, specify the image type,
        and provide the film ID.
      operationId: createImage_4
      parameters:
        - name: imageType
          in: query
          required: true
          schema:
            type: string
        - name: filmId
          in: query
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: CreateImageDto
          in: query
          description: CreateImageDto object
          required: true
          content:
            form-data:
              schema:
                $ref: "#/components/schemas/CreateImageDto"
      requestBody:
        content:
          application/json:
            schema:
              required:
                - image
              type: object
              properties:
                image:
                  type: string
                  format: binary
        required: true
      responses:
        "201":
          description: Created
          content:
            text/plain: {}
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
  /api/v1/comments:
    post:
      tags:
        - Comment
        - post
      summary: Create Comment for Film
      description: >-
        This endpoint allows users to create a comment for a specific film.
        Common Users can express their thoughts and opinions by providing a
        comment associated with the film identified by its unique identifier.
      operationId: createComment
      parameters:
        - name: createCommentDto
          in: query
          description: createCommentDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCommentDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCommentDto"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCommentDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - USER
  /api/v1/auth/token:
    post:
      tags:
        - User
        - post
      summary: User Authentication
      description: >-
        This endpoint handles user authentication operation, allowing users to
        sign in and obtain an access token.
      operationId: signIn
      parameters:
        - name: singInDto
          in: query
          description: SignIn object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignInDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSignedInDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
    delete:
      tags:
        - User
        - delete
      summary: Logout and Remove Refresh Token
      description: >-
        This endpoint facilitates user logout by removing the associated refresh
        token from the database. Upon successful execution, the user will be
        logged out, and the refresh token invalidated.
      operationId: signOut
      parameters:
        - name: refreshToken
          in: query
          description: The refreshToken of the current login user
          required: true
          schema:
            type: string
      responses:
        "202":
          description: Accepted
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
  /api/v1/auth/token/refresh:
    post:
      tags:
        - User
        - post
      summary: Refresh Access Token
      description: >-
        This endpoint allows users to obtain a new access token by providing a
        valid refresh token. The refresh token is used to extend the user's
        session without requiring reauthentication.
      operationId: getAccessToken
      parameters:
        - name: refreshTokenDto
          in: query
          description: refreshTokenDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshTokenDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSignedInDto"
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/auth/forgot-password:
    post:
      tags:
        - User
        - post
      summary: Initiate Password Recovery
      description: >-
        This endpoint triggers the password recovery process by sending an email
        to the user associated with the provided email address. If the email
        exists in the system, the user will receive instructions on how to
        securely reset their password.
      operationId: sendPasswordResetEmail
      parameters:
        - name: forgotPasswordDto
          in: query
          description: forgotPasswordDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForgotPasswordDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordDto"
        required: true
      responses:
        "202":
          description: Accepted
          content:
            text/plain: {}
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/users/{username}/{userId}:
    patch:
      tags:
        - patch
        - User
        - Staff
      summary: Update User
      description: >-
        This endpoint allows users to update his own User entity identified by
        its unique identifier (userId). Users can modify the properties of the
        user using the provided update payload.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: Current username
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: ID of the User
          required: true
        - name: UpdateUserDto
          in: query
          description: UpdateUserDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - Bearer Authentication:
            - ADMIN
            - USER
  /api/v1/streaming/{streamsiteId}:
    get:
      tags:
        - Stream site
        - get
      summary: Get Stream Site by ID
      description: >-
        This endpoint retrieves a specific Stream site identified by its unique
        identifier (id).
      operationId: getStreamSite
      parameters:
        - name: streamsiteId
          in: path
          description: ID of the Stream site
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStreamSiteDto"
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
    delete:
      tags:
        - Stream site
        - delete
      summary: Delete Stream site
      description: >-
        This endpoint allows users to delete a specific Stream site identified
        by its unique identifier (id). Deleting a Stream site is a permanent
        action and cannot be undone.
      operationId: deleteStreamSite
      parameters:
        - name: streamsiteId
          in: path
          description: The ID of the Stream site
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      responses:
        "202":
          description: Accepted
          content:
            text/plain: {}
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
    patch:
      tags:
        - patch
        - Stream site
      summary: Update Stream Site
      description: >-
        This endpoint allows users to update a specific Stream site entity
        identified by its unique identifier (streamsiteId). Users can modify the
        properties of the Stream site using the provided update payload.
      operationId: updateStreamSite
      parameters:
        - name: streamsiteId
          in: path
          description: ID of the Stream site
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: GetStreamSiteDto
          in: query
          description: GetStreamSiteDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStreamSiteDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateStreamSiteDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateStreamSiteDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - Bearer Authentication:
            - ADMIN
  /api/v1/staffs/{staffId}:
    get:
      tags:
        - Staff
        - get
      summary: Get Staff by ID
      description: >-
        This endpoint retrieves a specific staff identified by its unique
        identifier (id).
      operationId: getStaff
      parameters:
        - name: staffId
          in: path
          description: ID of the Staff
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStaffDto"
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
    delete:
      tags:
        - Staff
        - delete
      summary: Delete Staff
      description: >-
        This endpoint allows users to delete a specific staff identified by its
        unique identifier (id). Deleting a staff is a permanent action and
        cannot be undone.
      operationId: deleteStaff
      parameters:
        - name: staffId
          in: path
          description: The ID of the Staff
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      responses:
        "202":
          description: Accepted
          content:
            text/plain: {}
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
    patch:
      tags:
        - patch
        - Staff
      summary: Update Staff
      description: >-
        This endpoint allows users to update a specific Staff entity identified
        by its unique identifier (staffId). Users can modify the properties of
        the staff using the provided update payload.
      operationId: updateStaff
      parameters:
        - name: staffId
          in: path
          description: ID of the Staff
          required: true
        - name: UpdateStaffDto
          in: query
          description: UpdateStaffDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateStaffDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateStaffDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStaffDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - Bearer Authentication:
            - ADMIN
  /api/v1/sagas/{sagaId}:
    get:
      tags:
        - get
        - Saga
      summary: Get Saga by ID
      description: >-
        This endpoint retrieves a specific saga identified by its unique
        identifier (id).
      operationId: getSaga
      parameters:
        - name: sagaId
          in: path
          description: ID of the Saga
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFilmDto"
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
    delete:
      tags:
        - delete
        - Saga
      summary: Delete Saga
      description: >-
        This endpoint allows users to delete a specific saga identified by its
        unique identifier (id). Deleting a saga is a permanent action and cannot
        be undone.
      operationId: deleteSaga
      parameters:
        - name: sagaId
          in: path
          description: The ID of the Saga
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      responses:
        "202":
          description: Accepted
          content:
            text/plain: {}
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
    patch:
      tags:
        - patch
        - Saga
      summary: Update Saga
      description: >-
        This endpoint allows users to update a specific saga entity identified
        by its unique identifier (sagaId). Users can modify the properties of
        the saga using the provided update payload.
      operationId: updateSaga
      parameters:
        - name: sagaId
          in: path
          description: ID of the Saga
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: SagaDto
          in: query
          description: SagaDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SagaDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SagaDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SagaDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - Bearer Authentication:
            - ADMIN
  /api/v1/posts/{postId}:
    get:
      tags:
        - Post
        - get
      summary: Get Post by ID
      description: >-
        This endpoint retrieves a specific post identified by its unique
        identifier (postId).
      operationId: getPostById
      parameters:
        - name: postId
          in: path
          description: ID of the Post
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPostDto"
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
    delete:
      tags:
        - Post
        - delete
      summary: Delete Post
      description: >-
        This endpoint allows users to delete a specific post identified by its
        unique identifier (id). Deleting a post is a permanent action and cannot
        be undone.
      operationId: deletePost
      parameters:
        - name: postId
          in: path
          description: The ID of the Post
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      responses:
        "202":
          description: Accepted
          content:
            text/plain: {}
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
            - CRITIC
    patch:
      tags:
        - patch
        - Post
      summary: Update Post
      description: >-
        This endpoint allows users to update a specific post identified by its
        unique identifier (id). Users can modify the properties of the post
        using the provided update payload.
      operationId: updatePost
      parameters:
        - name: postId
          in: path
          description: ID of the Post
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: UpdatePostDto
          in: query
          description: UpdatePostDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdatePostDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePostDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPostDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - Bearer Authentication:
            - ADMIN
            - CRITIC
  /api/v1/genre/{genreId}:
    get:
      tags:
        - get
        - Genre
      summary: Get Genre by ID
      description: >-
        This endpoint retrieves a specific genre identified by its unique
        identifier (ID).
      operationId: getGenre
      parameters:
        - name: genreId
          in: path
          description: ID of the Genre
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenreDto"
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
    delete:
      tags:
        - Genre
        - delete
      summary: Delete Genre by ID
      description: >-
        This endpoint allows users to delete a specific genre identified by its
        unique identifier (ID). Deleting a genre is a permanent action and
        cannot be undone.
      operationId: deleteGenre
      parameters:
        - name: genreId
          in: path
          description: The ID of the Genre
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      responses:
        "202":
          description: Accepted
          content:
            text/plain: {}
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
    patch:
      tags:
        - patch
        - Genre
      summary: Update Genre by ID
      description: >-
        This endpoint allows users to update a specific genre identified by its
        unique identifier (genreId). Users can modify the properties of the
        genre using the provided update payload.
      operationId: updateGenre
      parameters:
        - name: genreId
          in: path
          description: ID of the Genre
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: genreDto
          in: query
          description: genreDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenreDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenreDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenreDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - Bearer Authentication:
            - ADMIN
  /api/v1/films/{filmId}:
    get:
      tags:
        - Film
        - get
      summary: Get Film by ID
      description: >-
        This endpoint retrieves a specific film identified by its unique
        identifier (ID).
      operationId: getFilm
      parameters:
        - name: filmId
          in: path
          description: ID of the Film
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFilmDto"
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
    delete:
      tags:
        - Film
        - delete
      summary: Delete Film
      description: >-
        This endpoint allows users to delete a specific film identified by its
        unique identifier (filmId). Deleting a film is a permanent action and
        cannot be undone.
      operationId: deleteFilm
      parameters:
        - name: filmId
          in: path
          description: The ID of the Film
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      responses:
        "202":
          description: Accepted
          content:
            text/plain: {}
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
    patch:
      tags:
        - patch
        - Film
      summary: Update Film
      description: >-
        This endpoint allows users to update a specific film identified by its
        unique identifier (ID). Users can modify the properties of the film
        using the provided update payload.
      operationId: updateFilm
      parameters:
        - name: filmId
          in: path
          description: ID of the Film
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: updateFilmDto
          in: query
          description: updateFilmDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateFilmDto"
      requestBody:
        content:
          application/json:
            schema:
              description: updateFilmDto object
              oneOf:
                - $ref: "#/components/schemas/UpdateFilmDto"
                - $ref: "#/components/schemas/UpdateMovieDto"
                - $ref: "#/components/schemas/UpdateSerieDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFilmDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - Bearer Authentication:
            - ADMIN
  /api/v1/films-genres/{relationshipId}:
    delete:
      tags:
        - Film
        - Genre
        - delete
      summary: Delete Film-Genre Relationship
      description: >-
        This endpoint allows users to delete a specific film-genre relationship
        identified by its unique identifier (relationshipId). Deleting a
        relationship is a permanent action and cannot be undone.
      operationId: deleteFilmGenre
      parameters:
        - name: relationshipId
          in: path
          description: The ID of the Relationship
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      responses:
        "202":
          description: Accepted
          content:
            text/plain: {}
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
    patch:
      tags:
        - patch
        - Film
        - Genre
      summary: Update Film-Genre Relationship
      description: >-
        This endpoint allows users to update a film-genre relationship by its
        unique identifier (relationshipId). Users can modify the genre
        associated with the film using the provided update payload.
      operationId: updateFilmGenre
      parameters:
        - name: relationshipId
          in: path
          description: ID of the Relationship
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: GetGenreFilmDto
          in: query
          description: GetGenreFilmDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGenreFilmDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGenreFilmDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateGenreFilmDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - Bearer Authentication:
            - ADMIN
  /api/v1/comments/{commentId}:
    get:
      tags:
        - Comment
        - get
      summary: Get Comment by ID
      description: >-
        This endpoint retrieves a specific comment based on its unique
        identifier (ID). Users can query and view details of a comment
        associated with a film by providing the comment's ID.
      operationId: getCommentById
      parameters:
        - name: commentId
          in: path
          description: ID of the comment
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCommentDto"
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
    delete:
      tags:
        - Comment
        - delete
      summary: Delete Comment
      description: >-
        This endpoint allows users to delete a specific comment identified by
        its unique identifier (ID). Deleting a comment is a permanent action and
        cannot be undone.
      operationId: deleteComment
      parameters:
        - name: commentId
          in: path
          description: The ID of the Comment
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      responses:
        "202":
          description: Accepted
          content:
            text/plain: {}
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
    patch:
      tags:
        - patch
        - Comment
      summary: Update Comment
      description: >-
        This endpoint allows users to update a specific comment identified by
        its unique identifier (ID). Users can modify the content or other
        properties of the comment using the provided update payload.
      operationId: updateComment
      parameters:
        - name: commentId
          in: path
          description: ID of the comment
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: updateCommentDto
          in: query
          description: updateCommentDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateCommentDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCommentDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCommentDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - Bearer Authentication:
            - USER
  /api/v1/auth/reset-password:
    patch:
      tags:
        - patch
        - User
      summary: Reset User Password
      description: " This endpoint allows users to securely reset their password by providing a valid reset token along with the new password. The reset token is typically obtained through an email sent during the password recovery process."
      operationId: resetPassword
      parameters:
        - name: recoverPasswordDto
          in: query
          description: recoverPasswordDto object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecoverPasswordDto"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecoverPasswordDto"
        required: true
      responses:
        "202":
          description: Accepted
          content:
            text/plain: {}
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/{ownerId}/media/images:
    get:
      tags:
        - get
        - Image
      summary: Get All Images by Image Type and Owner ID
      description: >-
        This endpoint retrieves all images associated with a specific entity
        (ownerId) and a specified image type.
      operationId: getAllImagesIdByImageTypeAndOwnerId
      parameters:
        - name: imageType
          in: query
          required: true
          schema:
            type: string
        - name: ownerId
          in: path
          description: >-
            The unique identifier of the entity (e.g., user, film) owning the
            images.
          required: true
          schema:
            type: string
        - name: "imageType "
          in: query
          description: >-
            The type of images to filter (e.g., "USER_PROFILE",
            "FILM_COLLECTION").
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetListImagesDto"
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
  /api/v1/users/{userId}:
    get:
      tags:
        - User
        - get
      summary: Get User by ID
      description: >-
        This endpoint retrieves a specific User identified by its unique
        identifier (id).
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of the User
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStaffDto"
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
    delete:
      tags:
        - User
        - delete
      summary: Delete User
      description: >-
        This endpoint allows users to delete a specific User identified by its
        unique identifier (id). Deleting a User is a permanent action and cannot
        be undone.
      operationId: deleteUserById
      parameters:
        - name: userId
          in: path
          description: The ID of the User
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      responses:
        "202":
          description: Accepted
          content:
            text/plain: {}
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
  /api/v1/users/{userId}/watchLists:
    get:
      tags:
        - User
        - get
        - Watch List
        - Watchlist
      summary: Get Watchlist from User
      description: >-
        This endpoint retrieves all items from a user's watchlist identified by
        the user's unique identifier (id).
      operationId: getWatchListFromUser
      parameters:
        - name: userId
          in: path
          description: ID of the User
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: page
          in: query
          description: The number page of the request.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The page size of each request. Default is "15"
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWatchListDto"
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
  /api/v1/users/{userId}/posts:
    get:
      tags:
        - Post
        - get
      summary: Get All Review Post by User ID. Latest post first.
      description: >-
        This endpoint retrieves the all reviews post from a specific user
        (identified by userId).
      operationId: getLatestReviewsByUserIdAndFilmType
      parameters:
        - name: userId
          in: path
          description: ID of the User
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: filmType
          in: query
          description: >-
            Filter films by type (e.g., "all", "1", "2"). Default is "all". (1
            is for movies, 2 is for series).
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: page
          in: query
          description: The number page of the request.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The page size of each request. Default is "15"
          required: false
          schema:
            type: integer
            format: int32
            default: 15
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPostDetailsDto"
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
  /api/v1/users/{userId}/posts/drafts:
    get:
      tags:
        - Post
        - get
      summary: Get All Not Finished Post (Drafts) by User ID. Latest post first.
      description: >-
        This endpoint retrieves the all drafts from a specific user (identified
        by userId).
      operationId: getLatestDraftsByUserId
      parameters:
        - name: userId
          in: path
          description: ID of the User
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: page
          in: query
          description: The number page of the request.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The page size of each request. Default is "15"
          required: false
          schema:
            type: integer
            format: int32
            default: 15
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPostDetailsDto"
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
  /api/v1/users/{userId}/films/{filmId}/posts/reviews:
    get:
      tags:
        - Post
        - get
      summary: Get Latest Review Post by Film ID and User ID
      description: >-
        This endpoint retrieves the latest review post from a specific user
        (identified by userId) for a specific film (identified by filmId).
      operationId: getLatestReviewPostByFilmIdAndUserId
      parameters:
        - name: userId
          in: path
          description: ID of the User
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: filmId
          in: path
          description: ID of the Film
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: reported
          in: query
          description: >-
            Filter comments based on whether they are reported or not. Default
            is "false".
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPostDetailsDto"
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
  /api/v1/users/{userId}/comments:
    get:
      tags:
        - Comment
        - get
      summary: Get All User Comments
      description: >-
        This endpoint retrieves all comments associated with a specific user
        identified by their unique identifier (userId). Users can view the
        comments they have made on various films.
      operationId: getAllCommentByUserId
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: reported
          in: query
          description: Return comments flaged as reported or not
          required: false
          schema:
            type: boolean
            default: false
        - name: filmType
          in: query
          description: The type of film to search for
          required: false
          schema:
            type: integer
            format: int32
            default: 1
        - name: page
          in: query
          description: The number page of the request
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The page size of each request
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCommentDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
  /api/v1/users/{userId}/comments/films/{filmId}:
    get:
      tags:
        - Comment
        - get
      summary: Get Comment by Film and User
      description: >-
        This endpoint retrieves a specific comment made by a user in a
        particular film. The comment is identified based on the unique
        identifiers of both the user (userId) and the film (filmId).
      operationId: getCommentByFilmIdAndUserId
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: filmId
          in: path
          description: ID ofthe film
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: reported
          in: query
          description: >-
            Filter comments based on whether they are reported or not. Default
            is "false".
          required: false
          schema:
            type: string
            default: "false"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCommentDto"
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
  /api/v1/sagas/{sagaId}/films:
    get:
      tags:
        - Film
        - get
      summary: Get Film by ID
      description: >-
        This endpoint retrieves all films associated with a specific saga
        identified by its unique identifier (ID).
      operationId: getAllFilmBySagaId
      parameters:
        - name: sagaId
          in: path
          description: ID of the Saga
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFilmDto"
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
  /api/v1/images/{imageId}:
    get:
      tags:
        - get
        - Image
      summary: Get Image by ID
      description: >-
        This endpoint retrieves an image identified by its unique identifier
        (imageId) from the file system.
      operationId: getImageFromFileSystem
      parameters:
        - name: imageId
          in: path
          description: ID of the Image
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      responses:
        "200":
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
  /api/v1/films/{imageId}/streamsites/media/images:
    get:
      tags:
        - get
        - Image
      summary: Get All Images from Streamsite by Image Type and Film ID
      description: >-
        This endpoint retrieves all images associated with a streamsite (owner)
        that appear in a specific film (identified by film ID) and filters by a
        specified image type.
      operationId: getAllImagesFromStreamSiteByImageTypeAndStreamSiteId
      parameters:
        - name: imageType
          in: query
          required: true
          schema:
            type: string
        - name: "imageType "
          in: query
          description: >-
            The type of images to filter (e.g., "USER_PROFILE",
            "FILM_COLLECTION").
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetListImagesDto"
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
  /api/v1/films/{id}/comments:
    get:
      tags:
        - Comment
        - get
      summary: Get All Comments by Film ID
      description: >-
        This endpoint retrieves all comments associated with a specific film
        identified by its unique identifier. Users can filter comments based on
        reporting status, rating type (positive, neutral, negative, or all), and
        order the results by a specified field.
      operationId: getAllCommentByFilmIdAndRatingOrderByField
      parameters:
        - name: id
          in: path
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: reported
          in: query
          description: >-
            Filter comments based on whether they are reported or not. Default
            is "false".
          required: false
          schema:
            type: boolean
            default: false
        - name: rating
          in: query
          description: >-
            Filter comments by rating type (positive, neutral, negative, or
            all). Default is "all".
          required: false
          schema:
            type: string
            default: all
        - name: order
          in: query
          description: >-
            Order comments by the specified field. Default is
            "publicationDateTime".
          required: false
          schema:
            type: string
            default: publicationDateTime
          example: publicationDateTime
        - name: page
          in: query
          description: The number page of the request
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The page size of each request
          required: false
          schema:
            type: integer
            format: int32
            default: 15
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCommentDto"
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
  /api/v1/films/{filmId}/streamingsites:
    get:
      tags:
        - Stream site
        - Film
        - get
      summary: Get All Streaming sites From a Specific Film
      description: >-
        This endpoint retrieves all entities of the Film-Streaming relationship
        for a specific film identified by its unique identifier (filmId).
      operationId: getStreamSiteFilm
      parameters:
        - name: filmId
          in: path
          description: ID of the Film
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStreamSiteFilmDto"
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
  /api/v1/films/{filmId}/staffs:
    get:
      tags:
        - Film
        - Staff
        - get
      summary: Get All Staff From a Specific Film
      description: >-
        This endpoint retrieves all entities of the film-Staff relationship for
        a specific film identified by its unique identifier (filmId).
      operationId: getStaffFilmByFilmId
      parameters:
        - name: filmId
          in: path
          description: ID of the Film
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStaffFilmDto"
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
  /api/v1/films/{filmId}/staffs/media/images:
    get:
      tags:
        - get
        - Image
      summary: Get All Images from Staff by Image Type and Film ID
      description: >-
        This endpoint retrieves all images associated with staff members
        (owners) that appear in a specific film (identified by film ID) and
        filter by a specified image type.
      operationId: getAllImagesFromStaffByImageTypeAndFilmid
      parameters:
        - name: imageType
          in: query
          required: true
          schema:
            type: string
        - name: filmId
          in: path
          description: The ID of the Film.
          required: true
        - name: "imageType "
          in: query
          description: >-
            The type of images to filter (e.g., "USER_PROFILE",
            "FILM_COLLECTION").
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetListImagesDto"
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
  /api/v1/films/{filmId}/posts/reviews:
    get:
      tags:
        - Post
        - get
      summary: Get All Posts From a Specifi Film by Custom Query
      description: >-
        This endpoint retrieves posts from a specific film based on custom query
        parameters, allowing users to filter and sort posts based on specific
        criteria.
      operationId: getReviewPostsByFilmIdAndRatingOrderByField
      parameters:
        - name: filmId
          in: path
          description: ID of the Film
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: reported
          in: query
          description: >-
            Filter posts based on whether they are reported or not. Default is
            "false".
          required: false
          schema:
            type: boolean
            default: false
        - name: rating
          in: query
          description: >-
            Filter posts by rating type (positive, neutral, negative, or all).
            Default is "all".
          required: false
          schema:
            type: string
            default: all
        - name: order
          in: query
          description: Filter posts by field name. Default is "publicationDateTime".
          required: false
          schema:
            type: string
            default: publicationDateTime
        - name: page
          in: query
          description: The number page of the request.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The page size of each request. Default is "15"
          required: false
          schema:
            type: integer
            format: int32
            default: 15
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPostDetailsDto"
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
  /api/v1/films/{filmId}/posts/ratings:
    get:
      tags:
        - Post
        - get
      summary: Get Total Critic Rating by Film ID
      description: >-
        This endpoint retrieves the total critic rating for a specific film
        identified by its unique identifier (filmId).
      operationId: getTotalCriticRatingByFilmId
      parameters:
        - name: filmId
          in: path
          description: ID of the Film
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: reported
          in: query
          description: >-
            Filter comments based on whether they are reported or not. Default
            is "false".
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
          content:
            text/plain: {}
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
  /api/v1/films/{filmId}/genres:
    get:
      tags:
        - Film
        - get
        - Genre
      summary: Get All Genres From a Specific Film
      description: >-
        This endpoint retrieves all entities of the film-genre relationship for
        a specific film identified by its unique identifier (filmId).
      operationId: getFilmGenre
      parameters:
        - name: filmId
          in: path
          description: ID of the Film
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateGenreFilmDto"
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
  /api/v1/films/{filmId}/comments/ratings:
    get:
      tags:
        - Comment
        - get
      summary: Get Total Ratings by Film ID
      description: >-
        This endpoint retrieves the sum of each rating type (positive, neutral,
        negative) for a specific film identified by its unique identifier. Users
        can filter ratings based on reporting status.
      operationId: getTotalRatingByFilmId
      parameters:
        - name: filmId
          in: path
          description: ID ofthe film
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: reported
          in: query
          description: >-
            Filter comments based on whether they are reported or not. Default
            is "false".
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
          content:
            text/plain: {}
        "400":
          description: Bad Request
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
  /api/v1/admin:
    get:
      tags:
        - User
      operationId: admin
      responses:
        "200":
          description: OK
          content:
            "*/*":
              schema:
                type: object
                additionalProperties:
                  type: object
  /api/v1/watchLists/users/{userId}:
    delete:
      tags:
        - Watch List
        - delete
      summary: Delete Watch List
      description: >-
        This endpoint allows users to delete a specific Watch List identified by
        its unique identifier (id). Deleting a Watch List is a permanent action
        and cannot be undone.
      operationId: deleteFilmFromWatchList
      parameters:
        - name: userId
          in: path
          description: The ID of the User
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
        - name: filmId
          in: query
          description: The ID of the Film
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      responses:
        "202":
          description: Accepted
          content:
            text/plain: {}
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication: []
  /api/v1/streaming/film/{relationshipId}:
    delete:
      tags:
        - Stream site
        - Film
        - delete
      summary: Delete Film-Streaming Relationship
      description: >-
        This endpoint allows users to delete a specific film-Streaming
        relationship identified by its unique identifier (relationshipId).
        Deleting a relationship is a permanent action and cannot be undone.
      operationId: deleteStreamSiteFilm
      parameters:
        - name: relationshipId
          in: path
          description: The ID of the Relationship
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      responses:
        "202":
          description: Accepted
          content:
            text/plain: {}
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
  /api/v1/films/staffs/{relationshipId}:
    delete:
      tags:
        - Film
        - Staff
        - delete
      summary: Delete Film-Staff Relationship
      description: >-
        This endpoint allows users to delete a specific film-Staff relationship
        identified by its unique identifier (relationshipId). Deleting a
        relationship is a permanent action and cannot be undone.
      operationId: deleteStaffFilm
      parameters:
        - name: relationshipId
          in: path
          description: The ID of the Relationship
          required: true
          schema:
            pattern: >-
              [a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}
            type: string
      responses:
        "202":
          description: Accepted
          content:
            text/plain: {}
        "401":
          description: Unauthorized
        "404":
          description: Not Found
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "405":
          description: Method Not Allowed
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
      security:
        - Bearer Authentication:
            - ADMIN
components:
  schemas:
    CreateTagDto:
      required:
        - tag
      type: object
      properties:
        tag:
          maxLength: 36
          minLength: 0
          type: string
    Error:
      type: object
      properties:
        errorCode:
          type: string
        message:
          type: string
        status:
          type: integer
          format: int32
        url:
          type: string
        reqMethod:
          type: string
        timestamp:
          type: string
          format: date-time
    GetTagDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tag:
          type: string
    CreateWatchListDto:
      required:
        - film
        - user
      type: object
      properties:
        film:
          type: string
        user:
          type: string
        addedDate:
          type: string
          format: date
        watched:
          type: boolean
    GetWatchListDto:
      required:
        - film
        - user
      type: object
      properties:
        id:
          type: string
        film:
          type: string
        user:
          type: string
        addedDate:
          type: string
          format: date
        watched:
          type: boolean
        mainImageId:
          type: string
        averageSuperRating:
          type: number
          format: float
        averageUserRating:
          type: number
          format: float
        tittle:
          type: string
        theatersReleaseDate:
          type: string
          format: date
    CreateUserDto:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
    UserSignedInDto:
      type: object
      properties:
        refreshToken:
          type: string
        accessToken:
          type: string
        username:
          type: string
        email:
          type: string
        userId:
          type: string
    CreateImageDto:
      required:
        - file
        - filmId
        - filmType
      type: object
      properties:
        file:
          type: string
          format: binary
        filmType:
          type: string
        filmId:
          type: string
    CreateStreamSiteDto:
      required:
        - name
        - price
      type: object
      properties:
        name:
          type: string
        price:
          type: string
    GetStreamSiteDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        price:
          type: string
    CreateStreamSiteFilmDto:
      required:
        - buy
        - rent
        - url
      type: object
      properties:
        url:
          maxLength: 255
          minLength: 0
          type: string
        rent:
          type: boolean
        buy:
          type: boolean
        filmId:
          type: string
        streamsiteId:
          type: string
    GetStreamSiteFilmDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        url:
          type: string
        rent:
          type: boolean
        buy:
          type: boolean
        filmName:
          type: string
        streamSiteName:
          type: string
        streamsiteId:
          type: string
          format: uuid
    CreateStaffDto:
      required:
        - biography
        - birthday
        - birthplace
        - firstName
        - lastName
      type: object
      properties:
        firstName:
          maxLength: 50
          minLength: 0
          type: string
        lastName:
          maxLength: 50
          minLength: 0
          type: string
        biography:
          type: string
        birthday:
          type: string
          format: date
        birthplace:
          maxLength: 50
          minLength: 0
          type: string
    GetStaffDto:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        biography:
          type: string
        birthday:
          type: string
          format: date
        birthplace:
          type: string
    SagaDto:
      required:
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    CreatePostDto:
      required:
        - film
        - tag
        - user
      type: object
      properties:
        publicationDateTime:
          type: string
          format: date-time
        likeCount:
          minimum: 0
          type: integer
          format: int32
        tittle:
          type: string
        synthesis:
          type: string
        user:
          type: string
        tag:
          type: string
        film:
          type: string
        status:
          type: string
        content:
          type: string
        headline:
          type: string
        review:
          type: boolean
    GetPostDto:
      type: object
      properties:
        id:
          type: string
        publicationDateTime:
          type: string
          format: date-time
        likeCount:
          type: integer
          format: int32
        tittle:
          type: string
        synthesis:
          type: string
        user:
          type: string
        tag:
          type: string
        film:
          type: string
        status:
          type: string
        content:
          type: string
        headline:
          type: string
        mainImageId:
          type: string
        tagId:
          type: string
        review:
          type: boolean
    GenreDto:
      required:
        - genre
      type: object
      properties:
        id:
          type: string
        genre:
          type: string
    CreateFilmDto:
      required:
        - filmType
        - tittle
      type: object
      properties:
        tittle:
          maxLength: 255
          minLength: 0
          type: string
        synopsis:
          maxLength: 255
          minLength: 0
          type: string
        originalLanguage:
          maxLength: 3
          minLength: 0
          type: string
        distributor:
          maxLength: 50
          minLength: 0
          type: string
        suitableFor:
          maxLength: 5
          minLength: 0
          type: string
        coomingSoon:
          type: string
          format: date
        streamingReleaseDate:
          type: string
          format: date
        filmType:
          type: integer
          format: int32
        sagaId:
          type: string
        averageSuperRating:
          type: number
          format: float
        averageUserRating:
          type: number
          format: float
        criticsConsensus:
          type: string
        aspectRatio:
          type: string
        soundMix:
          type: string
        viewCount:
          type: integer
          format: int64
        addedDate:
          type: string
          format: date
      discriminator:
        propertyName: filmType
    CreateMovieDto:
      required:
        - filmType
        - tittle
      type: object
      allOf:
        - $ref: "#/components/schemas/CreateFilmDto"
        - type: object
          properties:
            boxOffice:
              maxLength: 15
              minLength: 0
              type: string
            runTime:
              maxLength: 5
              minLength: 0
              type: string
            theatersReleaseDate:
              type: string
              format: date
            atTheaters:
              type: boolean
    CreateSerieDto:
      required:
        - filmType
        - tittle
      type: object
      allOf:
        - $ref: "#/components/schemas/CreateFilmDto"
        - type: object
          properties:
            seasonNumber:
              type: string
    GetFilmDto:
      type: object
      properties:
        id:
          type: string
        tittle:
          type: string
        synopsis:
          type: string
        originalLanguage:
          type: string
        distributor:
          type: string
        suitableFor:
          type: string
        coomingSoon:
          type: string
          format: date
        streamingReleaseDate:
          type: string
          format: date
        filmType:
          type: integer
          format: int32
        sagaId:
          type: string
        averageSuperRating:
          type: number
          format: float
        averageUserRating:
          type: number
          format: float
        criticsConsensus:
          type: string
        aspectRatio:
          type: string
        soundMix:
          type: string
        viewCount:
          type: integer
          format: int64
        addedDate:
          type: string
          format: date
        mainImageId:
          type: string
      discriminator:
        propertyName: filmType
    CreateStaffFilmDto:
      required:
        - filmName
        - role
        - staffId
      type: object
      properties:
        role:
          maxLength: 50
          minLength: 0
          type: string
        appearAs:
          maxLength: 50
          minLength: 0
          type: string
        filmName:
          type: string
        staffId:
          type: string
    GetStaffFilmDto:
      type: object
      properties:
        id:
          type: string
        role:
          type: string
        appearAs:
          type: string
        filmName:
          type: string
        staffName:
          type: string
        staffId:
          type: string
    CreateGenreFilmDto:
      required:
        - film
        - genre
      type: object
      properties:
        film:
          type: string
        genre:
          type: string
    GetGenreFilmDto:
      type: object
      properties:
        id:
          type: string
        film:
          type: string
        genre:
          type: string
    CreateCommentDto:
      required:
        - filmId
        - publicationDateTime
        - userId
      type: object
      properties:
        body:
          type: string
        publicationDateTime:
          type: string
          format: date-time
        likeCount:
          minimum: 0
          type: integer
          format: int32
        reported:
          type: boolean
        userId:
          type: string
        filmId:
          type: string
        rating:
          type: integer
          format: int32
        spoiler:
          type: boolean
    GetCommentDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        body:
          type: string
        publicationDateTime:
          type: string
          format: date-time
        likeCount:
          type: integer
          format: int32
        reported:
          type: boolean
        userId:
          type: string
        username:
          type: string
        filmId:
          type: string
        rating:
          type: integer
          format: int32
        spoiler:
          type: boolean
        filmName:
          type: string
        mainImageId:
          type: string
        theatersReleaseDate:
          type: string
    SignInDto:
      required:
        - password
        - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    RefreshTokenDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        refreshToken:
          type: string
        user:
          type: string
    ForgotPasswordDto:
      required:
        - email
      type: object
      properties:
        email:
          type: string
    UpdateUserDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          maxLength: 32
          minLength: 0
          type: string
        birthday:
          type: string
          format: date
        createdDate:
          type: string
          format: date
        about:
          maxLength: 255
          minLength: 0
          type: string
        followingCount:
          type: integer
          format: int32
        followmeCount:
          type: integer
          format: int32
    UserDto:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        birthday:
          type: string
          format: date
        createdDate:
          type: string
          format: date
        about:
          type: string
        followingCount:
          type: integer
          format: int32
        followmeCount:
          type: integer
          format: int32
    UpdateStreamSiteDto:
      type: object
      properties:
        name:
          type: string
        price:
          type: string
    UpdateStaffDto:
      type: object
      properties:
        firstName:
          maxLength: 50
          minLength: 0
          type: string
        lastName:
          maxLength: 50
          minLength: 0
          type: string
        biography:
          type: string
        birthday:
          type: string
          format: date
        birthplace:
          maxLength: 50
          minLength: 0
          type: string
    UpdatePostDto:
      type: object
      properties:
        publicationDateTime:
          type: string
          format: date-time
        likeCount:
          minimum: 0
          type: integer
          format: int32
        tittle:
          type: string
        synthesis:
          type: string
        tag:
          type: string
        status:
          type: string
        content:
          type: string
        headline:
          type: string
        review:
          type: boolean
    UpdateFilmDto:
      required:
        - filmType
      type: object
      properties:
        tittle:
          maxLength: 255
          minLength: 0
          type: string
        synopsis:
          maxLength: 255
          minLength: 0
          type: string
        originalLanguage:
          maxLength: 3
          minLength: 0
          type: string
        distributor:
          maxLength: 50
          minLength: 0
          type: string
        suitableFor:
          maxLength: 5
          minLength: 0
          type: string
        coomingSoon:
          type: string
          format: date
        streamingReleaseDate:
          type: string
          format: date
        filmType:
          type: integer
          format: int32
        sagaId:
          type: string
        averageSuperRating:
          type: number
          format: float
        averageUserRating:
          type: number
          format: float
        criticsConsensus:
          type: string
        aspectRatio:
          type: string
        soundMix:
          type: string
        viewCount:
          type: integer
          format: int64
        addedDate:
          type: string
          format: date
      discriminator:
        propertyName: filmType
    UpdateMovieDto:
      required:
        - filmType
      type: object
      allOf:
        - $ref: "#/components/schemas/UpdateFilmDto"
        - type: object
          properties:
            boxOffice:
              maxLength: 15
              minLength: 0
              type: string
            runTime:
              maxLength: 5
              minLength: 0
              type: string
            theatersReleaseDate:
              type: string
              format: date
            atTheaters:
              type: boolean
    UpdateSerieDto:
      required:
        - filmType
      type: object
      allOf:
        - $ref: "#/components/schemas/UpdateFilmDto"
        - type: object
          properties:
            seasonNumber:
              type: string
    UpdateCommentDto:
      type: object
      properties:
        body:
          type: string
        publicationDateTime:
          type: string
          format: date-time
        likeCount:
          type: integer
          format: int32
        reported:
          type: boolean
        rating:
          type: integer
          format: int32
        spoiler:
          type: boolean
    RecoverPasswordDto:
      required:
        - newPassword
        - token
      type: object
      properties:
        newPassword:
          type: string
        token:
          type: string
    GetListImagesDto:
      type: object
      properties:
        id:
          type: string
        imageSize:
          type: string
        owner:
          type: string
    GetPostDetailsDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        publicationDateTime:
          type: string
          format: date-time
        likeCount:
          minimum: 0
          type: integer
          format: int32
        tittle:
          type: string
        synthesis:
          type: string
        headline:
          type: string
        rating:
          type: integer
          format: int32
        user:
          type: string
        tag:
          type: string
        filmMainImageId:
          type: string
        filmId:
          type: string
        mainImageThreeDpi:
          type: string
        mainImageTwoDpi:
          type: string
        mainImageOneDpi:
          type: string
        review:
          type: boolean
    GetDynamicQyeryFilmDto:
      type: object
      properties:
        id:
          type: string
        tittle:
          type: string
        coomingSoon:
          type: string
          format: date
        streamingReleaseDate:
          type: string
          format: date
        filmType:
          type: integer
          format: int32
        averageSuperRating:
          type: number
          format: float
        averageUserRating:
          type: number
          format: float
        viewCount:
          type: integer
          format: int64
        mainImageId:
          type: string
      discriminator:
        propertyName: filmType
  securitySchemes:
    Bearer Authentication:
      type: http
      scheme: bearer
      bearerFormat: JWT
